#!/bin/bash

build_iossim_x86_32 () {
  echo "building WebRTC for the iOS x86_32 simulator"
  (
    export GYP_DEFINES="${GYP_DEFINES} target_arch=ia32"
    export GYP_GENERATOR_FLAGS="output_dir=out_ios_x86_32"
    python webrtc/build/gyp_webrtc
    ninja -C out_ios_x86_32/Release-iphonesimulator iossim AppRTCDemo
  )
}

build_iossim_x86_64 () {
  echo "building WebRTC for the iOS x86_64 simulator"
  (
    export GYP_DEFINES="${GYP_DEFINES} target_arch=x64"
    export GYP_GENERATOR_FLAGS="output_dir=out_ios_x86_64"
    python webrtc/build/gyp_webrtc
    ninja -C out_ios_x86_64/Release-iphonesimulator iossim AppRTCDemo
  )
}
 
build_iosdevice_arm () {
  echo "building WebRTC for iOS devices"
  (
    export GYP_DEFINES="${GYP_DEFINES} target_arch=arm"
    export GYP_GENERATOR_FLAGS="output_dir=out_ios_arm"
    python webrtc/build/gyp_webrtc
    ninja -C out_ios_arm/Release-iphoneos AppRTCDemo
  )
}

build_iosdevice_arm64 () {
  echo "building WebRTC for iOS arm64 devices"
  (
    export GYP_DEFINES="${GYP_DEFINES} target_arch=arm64"
    export GYP_GENERATOR_FLAGS="output_dir=out_ios_arm64"
    python webrtc/build/gyp_webrtc
    ninja -C out_ios_arm64/Release-iphoneos AppRTCDemo
  )
}

combine () {
  echo "combining libraries"

  rm -f out_ios_x86_32/Release-iphonesimulator/{libWebRTC-sim,libWebRTC-sim-min}.a
  rm -f out_ios_x86_64/Release-iphonesimulator/{libWebRTC-sim,libWebRTC-sim-min}.a
  rm -f out_ios_arm/Release-iphoneos/{libWebRTC-ios,libWebRTC-ios-min}.a
  rm -f out_ios_arm64/Release-iphoneos/{libWebRTC-ios,libWebRTC-ios-min}.a

  libtool -static -o out_ios_x86_32/Release-iphonesimulator/libWebRTC-sim.a out_ios_x86_32/Release-iphonesimulator/*.a
  libtool -static -o out_ios_x86_64/Release-iphonesimulator/libWebRTC-sim.a out_ios_x86_64/Release-iphonesimulator/*.a
  libtool -static -o out_ios_arm/Release-iphoneos/libWebRTC-ios.a out_ios_arm/Release-iphoneos/*.a
  libtool -static -o out_ios_arm64/Release-iphoneos/libWebRTC-ios.a out_ios_arm64/Release-iphoneos/*.a

  strip -S -x -o out_ios_x86_32/Release-iphonesimulator/libWebRTC-sim-min.a -r out_ios_x86_32/Release-iphonesimulator/libWebRTC-sim.a
  strip -S -x -o out_ios_x86_64/Release-iphonesimulator/libWebRTC-sim-min.a -r out_ios_x86_64/Release-iphonesimulator/libWebRTC-sim.a
  strip -S -x -o out_ios_arm/Release-iphoneos/libWebRTC-ios-min.a -r out_ios_arm/Release-iphoneos/libWebRTC-ios.a
  strip -S -x -o out_ios_arm64/Release-iphoneos/libWebRTC-ios-min.a -r out_ios_arm64/Release-iphoneos/libWebRTC-ios.a

  lipo -create\
    out_ios_x86_32/Release-iphonesimulator/libWebRTC-sim-min.a\
    out_ios_x86_64/Release-iphonesimulator/libWebRTC-sim-min.a\
    out_ios_arm/Release-iphoneos/libWebRTC-ios-min.a\
    out_ios_arm64/Release-iphoneos/libWebRTC-ios-min.a\
      -output ../../WKWebViewWebRTCShim/libWebRTC.a

  cp -R talk/app/webrtc/objc/public/ ../../WKWebViewWebRTCShim/Headers
}

cd "$(dirname "$BASH_SOURCE")"/..
mkdir -p build
cd build

export GYP_DEFINES="OS=ios build_with_libjingle=1 libjingle_objc=1 build_with_chromium=0 chromium_ios_signing=0"
export GYP_GENERATORS="ninja"
export GYP_CROSSCOMPILE=1

if [ ! -d "src" ]; then
  fetch webrtc_ios
fi

cd src

if ! git checkout 44; then
  git fetch origin
  git checkout -b 44 refs/remotes/branch-heads/44
fi

set -e

gclient sync
build_iossim_x86_32
build_iossim_x86_64
build_iosdevice_arm
build_iosdevice_arm64
combine
